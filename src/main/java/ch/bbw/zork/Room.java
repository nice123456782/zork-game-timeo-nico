package ch.bbw.zork;/** * Author:  Michael Kolling, Version: 1.1, Date: August 2000 * refactoring: Rinaldo Lanza, September 2020 */import java.util.HashMap; // Wird benutzt für die Exists also verlassen der Räume | HashMap ist eine Klasse aus der Java Standart Libarypublic class Room { // Public Klasse namens "Room" ist von überall sichtbar darum public	private String description; // Privates String Attribut namens "description", speichert die Beschreibung eines Raumes	private HashMap<String, Room> exits; // Privates Attribut, verwendet HashMap (aus java.util), speichert die Ausgänge eines Raums.										 // Der Schlüssel ist ein String wie z.B "north" und der Wert ist ein Room-Objekt –										 // also der Raum, der in dieser Richtung liegt. Also einfach der Ausgang mit einem Schlüssel und Ziel names "exits"	private boolean isWinningRoom = false; 	// Privates boolesches Attribut, das speichert, ob dieser Raum der Gewinnerraum ist.											// Standardmäßig ist es false (kein Gewinn).											// Es kann später mit der Methode setWinningRoom(true) geändert werden.	public Room (String description) { // Konstruktor, dieser wird Aufgerufen wenn man ein neues Room Objekt erstellen will										// Wenn ich eine neuen Raum Aufrufe mit z.B einer Methode dann ist das erste was man schreibt kommt in das attribut description hinein und eine neue hashmap tabelle wird erstellt, sie ist am Anfang einfach leer		this.description = description;		this.exits = new HashMap<>();	}	public void setExits (Room north, Room east, Room south, Room west) { // Public Methode darf von überall aufgerufen werden | void sie gibt nichts zurück | sie bekommt vier Räume übergeben		exits.put("north", north); // zu oben in der Klammer wir sagen Room north weil java braucht zu dem Parameter einen Datentyp		exits.put("east", east); // wir setzen "east" zu dem Room east also z.B ist Wohnzimmer "east" und alles das in die hashmap und schliesslich in "exits"		exits.put("south", south); // wichtig north east und so weiter sind räume in den Räumen die wir übergeben keine Himmelsrichtungen		exits.put("west", west);	}	public String shortDescription() { // Public Methode | Typ String | Heisst shortDescription		return description; // gibt descripition zurück das heisst später könne wir das so aufrufen z.B ausgeben Room keller = new Room("im dunklen Keller"); | System.out.println(keller.shortDescription());	}	public String longDescription() { // Public Methode | Typ String | Names "longDescription"		StringBuilder stringBuilder = new StringBuilder("Du bist " + description + ".\n"); // Erstellung eines neuen Objektes namens "stringbuilder" | StringBuilder ist eine java Klasse mit der man mehrere Strings zu einem gemeinsam Objekt zusammenfügt | \n Zeilenabstand		stringBuilder.append(exitString()); // Dieses Objekt von oben wird mit unten siehst du anderer Methode exitString zusammengefügt		return stringBuilder.toString(); // Aus dem Objekt wird jetzt ein normaler String	}	private String exitString() { // Private Methode also nur innerhalb der Klasse | Typ String | exitString ist der Name		return "Exits:" + String.join(" ", exits.keySet()); // String.join fügt alles zusammen | exits.keySet alle Ausgänge also gibt dir alle Schlüssel aus exits	}	public Room nextRoom(String direction) { // Public Methode | Typ Room gibt also ein Room Objekt zurück | nextRoom Name | String direction das gibt der Spieler ein also z.B "north"		return exits.get(direction); // exits deine hashmap | .get(direction) holt den Raum, der zu diesem Schlüssel gehört	}	public void setWinningRoom (boolean isWinningRoom) { // Public Methode | void gibt nichts zurück | nimmt boolean Parameter namens isWinningRoom true oder false		this.isWinningRoom = isWinningRoom; // speichert den gegebenen Wert true oder false in this.isWinningRoom	}	public boolean isWinningRoom() { // Public | Eingabe ist true oder false		return isWinningRoom; // gibt bekannt ob der Raum der Winning Raum ist oder nicht	}}