package ch.bbw.zork;import java.util.Scanner; // Importiert die Klasse Scanner | Scanner ist eine Klasse, die es erlaubt Benutzereingaben einzulesen zu k√∂nnen./** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game { // √ñffentliche Klasse Names "Game"	private Parser parser; // Attribut "parser" speichert Klasse Parser | Parser hat eigentlich die Aufgabe die Eingaben in Befehle umzuwandeln	private Room currentRoom; // Attribut "currentRoom" speichert Klasse Room | Klasse Room definiert einen Raum	private Room keller, speisesall, bibliothek, geheimgang, schlafgemach, galerie, garten; // Noch weitere Attribute speichern einen Raum beziehungsweise die Klasse Room, heisst wir speichern den aussenRaum das Office etc ...	public Game() { // Konstruktor von dieser "Game" Klasse, wird ausgef√ºhrt wenn man eines neues "Game" Objekt erstellt		parser = new Parser(System.in); // Heisst man erstellt ein neues Parser-Objekt das mit System.in arbeitet also mit der Tastatur ab hier wird also auf die Tastatur geh√∂rt		createRooms(); // "createRooms" Methode wird aufgerufen | "createRooms" sind die R√§ume und der GewinnerRaum	}	private void createRooms() { // Private Methode | Gibt nichts zur√ºck darum void | Name createRooms		keller = new Room("im dunklen, feuchten Keller"); // Neues Room Objekt wird erstellt mit einer gewissen Beschreibung und variable "keller" speichert das ganze		speisesall = new Room("im Speisesall mit langem Tisch");		bibliothek = new Room("in der staubigen Bibliothek");		geheimgang = new Room("in einem geheimen, engen Gang");		schlafgemach = new Room("im k√∂niglichen Schlafgemach");		galerie = new Room("in der zerfallenen Galerie");		garten = new Room("im √ºberwucherten Schlossgarten"); // das hier ist √ºbrigens der GewinnerRaum		keller.setExits(null, speisesall, null, null); // Wir nehmen den keller Raum und r√ºfen damit die "setExits" Methode auf und √ºbergeben diese 4 Sachen | Heisst vom Keller geht es nur in Richtung Osten dort kommt man in den Speisesall		speisesall.setExits(null, bibliothek, null, keller);		bibliothek.setExits(null, geheimgang, null, speisesall);		geheimgang.setExits(null, schlafgemach, null, bibliothek);		schlafgemach.setExits(null, galerie, null, geheimgang);		galerie.setExits(null, garten, null, schlafgemach);		garten.setExits(null, null, null, galerie);		garten.setWinningRoom(true); // Garten Objekt wird mit setWinninngRoom Methode aufgerufen und sagt das garten true ist also der GewinnerRaum		currentRoom = keller; // Anfangs Raum ist der Keller | currentRoom hat den Wert vom Keller	}	/**	 * Main play routine.  Loops until end of play.	 */	public void play() { // Public Methode | Keine R√ºckgabe | Namens play		printWelcome(); // printWelcome Methode wird aufgerufen		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false; // "finished" Variabel hat den Wert falsch		while (!finished) { // solange finished negativ ist also false:			Command command = parser.getCommand(); // fragst den Parser nach dem command, welcher der Spieler eingegeben hat √ºbrigens mussen zuerst command mit Command Klasse deklarieren			finished = processCommand(command); // "processCommand" Methode wird aufgerufen und der command wird √ºbergeben, R√ºckgabe true oder false wird in finished gespeichert		}		System.out.println("Thank you for playing. Good bye"); // Wenn Spiel vorbei ist kommt dieser text	}	private void printWelcome() { // Private Methode | ohne R√ºckgabe | Names printWelcome		System.out.println(); // LeerZeile		System.out.println("Willkommen im Schloss-Abenteuer!");		System.out.println("Ziel: Finde den Garten.");		System.out.println(); // LeerZeile		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) { // Private Boolean Methode heisst R√ºckgabe true oder false | Nimmt als parameter denn "command" mit dem Typ "Command" indem Fall die Klasse		if (command.isUnknown()) { // wenn command nicht bekannt ist			System.out.println("Ich verstehe das Kommando nicht...");			return false;		}		String commandWord = command.getCommandWord(); // Holt das Kommando-Wort (z.‚ÄØB. "go", "help") aus dem Command-Objekt. | Speichert es in der String-Variable "commandWord".		switch (commandWord) { // mit switch und case variabel √ºberpr√ºfen in diesem Fall das Kommando-Wort			case "help": // Wenn Kommando-Wort "help" dann:				printHelp(); // Print-Help Funktion wird ausgef√ºhrt				break; // dann abbrechen damit die anderen cases nicht ausgef√ºhrt werden zur Sicherheit			case "go": // Wenn Kommando-Wort "go" dann:				goRoom(command); // goRoom Funktion wird aufgerufen und ganzes command Objekt wird mitgegeben				break;			case "quit": // Wenn Kommando-Wort "quit" dann:				if (command.hasSecondWord()) { // Wenn command Objekt ein zweites Wort hat dann:					System.out.println("Was beenden?"); // Gibt das aus				} else {					return true; // signal that we want to quit und Methode wird auch beendet				}				break;			default: // Wenn keiner von den cases dann:				System.out.println("Unbekannter Fehler"); // Gibt das aus		}		return false; // in allen anderen F√§lle soll das Spiel weitergehen darum false	}	private void printHelp() { // Private Methode ohne R√ºckgabe names printHelp Hilfversuche wenn man "help" eingibt		System.out.println("Du bist verloren im alten Schloss...");		System.out.println("M√∂gliche Befehle: go, quit, help");		System.out.println(parser.showCommands()); // Commands zeigen	}	private void goRoom(Command command) { // Private Methode ohne R√ºckgabe names goRoom und mann bekommt das Objekt command von der Klasse Command enth√§lt z.B go north		if (!command.hasSecondWord()) { // Wenn command Objekt kein zweites Word dann:			System.out.println("Wohin m√∂chtest du gehen?"); // Diese Nachricht		}		String direction = command.getSecondWord(); // in der String Variabel "direction" wird das zweite Wort von dem command Objekt gespeichert		Room nextRoom = currentRoom.nextRoom(direction); // in der Variabel von der Klasse Room namens nextRoom speichert den n√§chstens Raum der in dieser Richtung liegt |ruft nextRoom methode auf mit dem aktuellen Raum davon die direction auch		if (nextRoom == null) { // Wenn nextRoom gleich 0 null ist			System.out.println("Dort ist keine T√ºr");		} else { // Wenn der Raum nicht gleich 0 ist			currentRoom = nextRoom; // der aktuelle Raum hat jetzt den Wert vom n√§chsten Raum			System.out.println(currentRoom.longDescription()); // Die etwas l√§ngere beschreibung des akuellen Raumes wird asugegbene			if (currentRoom.isWinningRoom()) { // wenn der aktuelle Raum der Gewinner Raum ist:				System.out.println("üéâ Du hast den Garten erreicht und das Spiel gewonnen!");				System.exit(0); // Konsole wird geschlossen, laufendes Programm wird beendet			}		}	}}